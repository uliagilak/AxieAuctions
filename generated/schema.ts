// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Auction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Auction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Auction", id.toString(), this);
  }

  static load(id: string): Auction | null {
    return store.get("Auction", id) as Auction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (value === null) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(value as BigInt));
    }
  }

  get endingPrice(): BigInt | null {
    let value = this.get("endingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("endingPrice");
    } else {
      this.set("endingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get startingPrice(): BigInt | null {
    let value = this.get("startingPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startingPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("startingPrice");
    } else {
      this.set("startingPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (value === null) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(value as string));
    }
  }

  get totalPrice(): BigInt | null {
    let value = this.get("totalPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("totalPrice");
    } else {
      this.set("totalPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctions(): Array<string> | null {
    let value = this.get("auctions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set auctions(value: Array<string> | null) {
    if (value === null) {
      this.unset("auctions");
    } else {
      this.set("auctions", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Stats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stats entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stats entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stats", id.toString(), this);
  }

  static load(id: string): Stats | null {
    return store.get("Stats", id) as Stats | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get activeauctions(): BigInt | null {
    let value = this.get("activeauctions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set activeauctions(value: BigInt | null) {
    if (value === null) {
      this.unset("activeauctions");
    } else {
      this.set("activeauctions", Value.fromBigInt(value as BigInt));
    }
  }

  get cancelledautctions(): BigInt | null {
    let value = this.get("cancelledautctions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cancelledautctions(value: BigInt | null) {
    if (value === null) {
      this.unset("cancelledautctions");
    } else {
      this.set("cancelledautctions", Value.fromBigInt(value as BigInt));
    }
  }

  get finishedauctions(): BigInt | null {
    let value = this.get("finishedauctions");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finishedauctions(value: BigInt | null) {
    if (value === null) {
      this.unset("finishedauctions");
    } else {
      this.set("finishedauctions", Value.fromBigInt(value as BigInt));
    }
  }
}
